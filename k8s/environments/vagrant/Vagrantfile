# -*- mode: ruby -*-
# vi: set ft=ruby :

KUBERNETES_VERSION = "1.29.2-00"

$install_kubernetes = <<-SCRIPT
#!/bin/bash

# 비대화형 설치를 위한 환경 변수 설정
export DEBIAN_FRONTEND=noninteractive

# 기본 시스템 설정
sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config
systemctl restart ssh
sed -i 's/archive.ubuntu.com/mirror.kakao.com/g' /etc/apt/sources.list
sed -i 's/security.ubuntu.com/mirror.kakao.com/g' /etc/apt/sources.list

# 시스템 업데이트
apt-get update
apt-get install -y apt-transport-https ca-certificates curl

# 스왑 비활성화
swapoff -a
sed -i '/swap/d' /etc/fstab

# 필요한 모듈 활성화
cat <<EOF | tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

modprobe overlay
modprobe br_netfilter

# 필요한 sysctl 파라미터 설정
cat <<EOF | tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sysctl --system

# Docker 설치
apt-get update
apt-get install -y docker.io
mkdir -p /etc/docker
cat <<EOF | tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
systemctl enable docker
systemctl daemon-reload
systemctl restart docker

# 쿠버네티스 저장소 설정
mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | tee /etc/apt/sources.list.d/kubernetes.list

# 쿠버네티스 컴포넌트 설치
apt-get update

# 기존 hold 해제
apt-mark unhold kubelet kubeadm kubectl

# 패키지 설치
apt-get install -y --allow-change-held-packages kubelet kubeadm kubectl

# 패키지 hold 설정
apt-mark hold kubelet kubeadm kubectl

# 설치 확인
kubeadm version
kubectl version --client
SCRIPT

Vagrant.configure("2") do |config|
    # 디스크 디렉토리 생성
    disk_dir = File.join(File.dirname(File.expand_path(__FILE__)), '.disk')
    Dir.mkdir(disk_dir) unless File.exist?(disk_dir)

    # VirtualBox GuestAdditions 자동 업데이트 비활성화
    if Vagrant.has_plugin?("vagrant-vbguest")
      config.vbguest.auto_update = false
      config.vbguest.no_remote = true
    end

    # control-plane
    config.vm.define "control-plane1" do |config|
      config.vm.box = "ubuntu/focal64"
      config.vm.provider "virtualbox" do |vb|
        vb.name = "control-plane1"
        vb.cpus = 2
        vb.memory = 4000
        vb.customize ["modifyvm", :id, "--groups", "/k8s-cluster"]
        disk_path = File.join(disk_dir, 'ceph1.vdi')
        unless File.exist?(disk_path)
          vb.customize ['createmedium', 'disk', '--filename', disk_path, '--size', 10240]
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SCSI', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', disk_path]
      end
      config.vm.hostname = "control-plane1"
      config.vm.network "private_network", ip: "192.168.56.21", nic_type: "virtio"
      config.vm.network "forwarded_port", guest: 6443, host: 6443, protocol: "tcp"
      config.vm.network "forwarded_port", guest: 80, host: 8080, protocol: "tcp"
      
      # 쿠버네티스 설치
      config.vm.provision "shell", inline: $install_kubernetes
      
      # Master 노드 프로비저닝
      config.vm.provision "shell", inline: <<-SHELL
        # 쿠버네티스 초기화
        kubeadm init --apiserver-advertise-address=192.168.56.21 --pod-network-cidr=10.244.0.0/16 > /root/kubeadm-init.log
        
        # 조인 커맨드 저장
        kubeadm token create --print-join-command > /vagrant/join-command.sh
        chmod +x /vagrant/join-command.sh
        
        # kubectl 설정
        mkdir -p /home/vagrant/.kube
        cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        chown -R vagrant:vagrant /home/vagrant/.kube
        
        # Flannel CNI 설치
        su - vagrant -c "kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml"
      SHELL
    end
  
    # worker1
    config.vm.define "worker1" do |config|
      config.vm.box = "ubuntu/focal64"
      config.vm.provider "virtualbox" do |vb|
        vb.name = "worker1"
        vb.cpus = 2
        vb.memory = 4000
        vb.customize ["modifyvm", :id, "--groups", "/k8s-cluster"]
        disk_path = File.join(disk_dir, 'ceph2.vdi')
        unless File.exist?(disk_path)
          vb.customize ['createmedium', 'disk', '--filename', disk_path, '--size', 10240]
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SCSI', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', disk_path]
      end
      config.vm.hostname = "worker1"
      config.vm.network "private_network", ip: "192.168.56.22", nic_type: "virtio"
      
      # 쿠버네티스 설치
      config.vm.provision "shell", inline: $install_kubernetes
      
      # Worker1 노드 프로비저닝
      config.vm.provision "shell", inline: <<-SHELL
        # 클러스터 조인
        bash /vagrant/join-command.sh || true
      SHELL
    end
  
    # worker2
    config.vm.define "worker2" do |config|
      config.vm.box = "ubuntu/focal64"
      config.vm.provider "virtualbox" do |vb|
        vb.name = "worker2"
        vb.cpus = 2
        vb.memory = 4000
        vb.customize ["modifyvm", :id, "--groups", "/k8s-cluster"]
        disk_path = File.join(disk_dir, 'ceph3.vdi')
        unless File.exist?(disk_path)
          vb.customize ['createmedium', 'disk', '--filename', disk_path, '--size', 10240]
        end
        vb.customize ['storageattach', :id, '--storagectl', 'SCSI', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', disk_path]
      end
      config.vm.hostname = "worker2"
      config.vm.network "private_network", ip: "192.168.56.23", nic_type: "virtio"
      
      # 쿠버네티스 설치
      config.vm.provision "shell", inline: $install_kubernetes
      
      # Worker2 노드 프로비저닝
      config.vm.provision "shell", inline: <<-SHELL
        # 클러스터 조인
        bash /vagrant/join-command.sh || true
      SHELL
    end
  
    # Hostmanager plugin configuration
    config.hostmanager.enabled = true
    config.hostmanager.manage_guest = true
    config.hostmanager.manage_host = true
    config.hostmanager.ignore_private_ip = false
  
    # Enable Synced Folder for join command
    config.vm.synced_folder ".", "/vagrant"
end
  